<template class='doc-view'>
    <header id='fixed-top'>
        高级
    </header>
    <h2 id='fixed-define'>
        自定义
    </h2>
    <p>
        在大部分情况，你都需要自定义一些扩展，自定义扩展需要遵循一定的规则。
    </p>
    <h3 id='fixed-component'>
        组件
    </h3>
    <pre q-code>
@Component({
    selector: string,
    template: string,
    styles: Array<string>
})
export default class {
    // todo
};
    </pre>
    <h3 id='fixed-directive'>
        指令
    </h3>
    <pre q-code>
@Directive({
    selector: string
})
export default class {
    // todo
};
    </pre>
    <h3 id='fixed-service'>
        服务
    </h3>
    <pre q-code>
@Service({

})
export default class {
    // todo
};
    </pre>
    <h2 id='fixed-module'>
        模块
    </h2>
    <p>
        虽然一个模块也是可以的，不过如果项目规模越来越大的时候，多模块会是更好的选择。
    </p>
    <pre q-code>
@Module(options)
export default class {
    // todo
};
    </pre>
    <h3 id='fixed-module-options'>
        options
    </h3>
    <p>
        这是一个json，你可以通过这个配置项来配置模块，下面是所有可用的配置项。
    </p>
    <h4 id='fixed-module-options-bootstrap'>
        bootstrap
    </h4>
    <p>
        值应该是一个组件，表示当前模块的启动组件，只有主模块需要配置。
    </p>
    <h4 id='fixed-module-options-declarations'>
        declarations
    </h4>
    <p>
        值应该是一个数组，用于声明本模块具有的组件、指令、服务。
    </p>
    <h4 id='fixed-module-options-imports'>
        imports
    </h4>
    <p>
        值应该是一个数组，在这里引入别的模块，引入就意味着，本模块具有引入模块的组件、指令和服务（需要在exports中登记）。
    </p>
    <h4 id='fixed-module-options-exports'>
        exports
    </h4>
    <p>
        值应该是一个数组，暴露的内容，如果别的模块想用本模块的内容，需要本模块这此处暴露。
    </p>
</template>
