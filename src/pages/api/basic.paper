<template class='doc-view'>
    <header id='fixed-top'>
        基础
    </header>
    <h2 id='fixed-platform'>
        启动
    </h2>
    <pre q-code>
        import { platform } from 'nefbl';
    </pre>
    <p>
        "platform"是一个用于屏蔽平台差异的方法，它会根据当前浏览器的环境来初始化后续需要使用的相关内容。其上有一些方法或属性可以使用，首先，需要获取其实例：
    </p>
    <pre q-code>
        let pf = platform(options);
    </pre>
    <h3 id='fixed-platform-options'>
        options
    </h3>
    <p>
        这是一个json，你可以通过这个配置项来告诉框架在屏蔽浏览器差异的时候你的一些额外意图。
    </p>
    <h4 id='fixed-platform-options-el'>
        el
    </h4>
    <p>
        必输，值需要是一个结点对象，表示此框架后续需要管理的区域。
    </p>
    <h4 id='fixed-platform-options-styles'>
        styles
    </h4>
    <p>
        一个数组，数组的内容应该是css字符串，用以设置全局css。
    </p>
    <h3 id='fixed-platform-return'>
        实例
    </h3>
    <p>
        "platform"执行后的实例"pf"，是一个对象，下面列出其中可用的方法或属性。
    </p>
    <h4 id='fixed-platform-return-bootstrap'>
        bootstrap
    </h4>
    <p>
        这是一个方法，用于启动模块（主模块）：
    </p>
    <pre q-code>
import appModule from "./app.module";
pf.bootstrap(appModule);
    </pre>
    <h2 id='fixed-module'>
        模块
    </h2>
    <pre q-code>
@Module(options)
export default class {
    // todo
};
    </pre>
    <h3 id='fixed-module-options'>
        options
    </h3>
    <p>
        这是一个json，你可以通过这个配置项来配置模块，下面是所有可用的配置项。
    </p>
    <h4 id='fixed-module-options-bootstrap'>
        bootstrap
    </h4>
    <p>
        值应该是一个组件，表示当前模块的启动组件，只有主模块需要配置。
    </p>
    <h4 id='fixed-module-options-declarations'>
        declarations
    </h4>
    <p>
        值应该是一个数组，用于声明本模块具有的组件、指令。
    </p>
    <h4 id='fixed-module-options-imports'>
        imports
    </h4>
    <p>
        值应该是一个数组，在这里引入别的模块，引入就意味着，本模块具有引入模块的组件、指令（需要在exports中登记）。
    </p>
    <h4 id='fixed-module-options-exports'>
        exports
    </h4>
    <p>
        值应该是一个数组，暴露的内容，如果别的模块想用本模块的内容，需要本模块这此处暴露。
    </p>
    <h2 id='fixed-define'>
        自定义
    </h2>
    <p>
        在大部分情况，你都需要自定义一些扩展，自定义扩展需要遵循一定的规则。
    </p>
    <h3 id='fixed-component'>
        组件
    </h3>
    <pre q-code>
@Component({
    selector: string,
    template: string,
    styles: Array<string>
})
export default class {
    // todo
};
    </pre>
    <h4 id='fixed-component-setup'>
        $setup
    </h4>
    <p>
        一个方法，应该返回一个json，用于定义双向绑定的数据和方法。
    </p>
    <pre q-code>
$setup(){
    return {
        doit(){
            // todo
        }
    };
}
    </pre>
    <p>
        我们可以看到，我们定义了一个方法doit，这样，你就可以通过this.doit在定义的别的方法或生命周期钩子中调用了。
    </p>
    <p>
        对于双向绑定的数据，你需要借助两个方法：
    </p>
    <pre q-code>
import { reactive, ref } from 'nefbl';
...
    @setup(){

        let info = ref('1');
        let infoObj = reactive({});

        return {
            info,
            infoObj
        };
    }
...
    </pre>
    <p>
        在对象方法或者生命周期中修改数据（我们把info举例子），只需要这样：
    </p>
    <pre q-code>
        this.info=新值;
    </pre>
    <p>
        如果是在普通的方法中修复，需要这样：
    </p>
    <pre q-code>
        info.value=新值;
    </pre>
    <h4 id='fixed-component-hook'>
        钩子
    </h4>
    <p>
        class里面可以定义启动方法和生命周期钩子等方法。
    </p>
    <h5 id='fixed-component-mounted'>
        $mounted
    </h5>
    <p>
        组件挂载完成执行。
    </p>
    <h5 id='fixed-component-beforeUpdate'>
        $beforeUpdate
    </h5>
    <p>
        数据改变导致的更新执行前触发。
    </p>
    <h5 id='fixed-component-updated'>
        $updated
    </h5>
    <p>
        数据改变导致的更新执行后触发。
    </p>
    <h3 id='fixed-directive'>
        指令
    </h3>
    <pre q-code>
@Directive({
    selector: string
})
export default class {
    // todo
};
    </pre>
    <h4 id='fixed-directive-hook'>
        钩子
    </h4>
    <p>
        class里面可以定义生命周期钩子等方法。
    </p>
    <h5 id='fixed-directive-inserted'>
        $inserted
    </h5>
    <p>
        指令第一次生效的时候执行。
    </p>
    <h5 id='fixed-directive-update'>
        $update
    </h5>
    <p>
        数据改变导致的更新触发。
    </p>
    <p>
        所有的生命周期钩子，其实就是一个方法，语法如下：
    </p>
    <pre q-code>
function(el, binding){
    // todo
}
    </pre>
    <p>
        其中el表示指令所在的DOM结点，binding是一个json，记录着一些信息。
    </p>
    <p>
        指令使用的时候，基本格式如下：
    </p>
    <pre q-code='html'>
        <XXX ui-demo:type='exp'></XXX>
    </pre>
    <p>
        binding就记录了指令在使用的时候的详细信息：
    </p>
    <ul>
        <li>
            <span class="important">type</span>
            ：ui-demo是指令的名字，type是补充的额外信息。
        </li>
        <li>
            <span class="important">exp</span>
            ：指令本身就是属性，exp相当于属性值。
        </li>
        <li>
            <span class="important">value</span>
            ：属性值在当前组件对象上作为表达式解析后的值。
        </li>
        <li>
            <span class="important">target</span>
            ：当前组件对象实例。
        </li>
    </ul>
    <h3 id='fixed-more'>
        更多
    </h3>
    <p>
        大部分内容我们都按照类型进行了穿插说明，对于一些上面没有说明的，在这里进行统一补充。
    </p>
    <h4 id='fixed-more-attribute'>
        对象属性
    </h4>
    <p>
        就是实例化的时候，当前对象上自动具有的属性值。
    </p>
    <h5 id='fixed-more-attribute-_module'>
        _module
    </h5>
    <p>
        存在于组件和指令对象上，表示当前所在的模块实例。
    </p>
    <h4 id='fixed-more-method'>
        核心方法
    </h4>
    <p>
        也就是可以通过nefbl直接导入的方法，语法如下（比如XXX方法）：
    </p>
    <pre q-code>
        import { XXX } from 'nefbl';
    </pre>
    <h5 id='fixed-more-method-mountComponent'>
        mountComponent
    </h5>
    <p>
        此方法用于在指定的结点主动挂载组件：
    </p>
    <pre q-code>
        mountComponent(el, Component, module);
    </pre>
    <p>
        el和module分别表示挂载点DOM和当前模块实例，而Component表示组件（非实例对象）。
    </p>
</template>
